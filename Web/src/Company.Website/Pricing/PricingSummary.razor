@inject PricingService PricingService
@inject CurrencyService CurrencyService

@if (FullPrice > DealPrice)
{
    <h6 style="text-decoration: line-through;">@GetFormattedAmount(FullPrice)</h6>
}
<h5>@GetFormattedAmount(DealPrice)</h5>
<p>@Pricing.Details</p>

@code {
    [Parameter]
    public int ProductVariantId { get; set; }
    [Parameter]
    public string CurrencyCode { get; set; }

    private string CurrencySymbol { get; set; }
    private Pricing Pricing { get; set; }
    private decimal FullPrice { get; set; }
    public decimal DealPrice { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        CurrencySymbol = CurrencyService.GetCurrencyCharacter(CurrencyCode);

        Pricing = await PricingService.GetPricingByProductTypId(ProductVariantId);
        FullPrice = await CurrencyService.ConvertCurrency(CurrencyCode, Pricing.FullPriceGBP);
        DealPrice = await CurrencyService.ConvertCurrency(CurrencyCode, Pricing.DealPriceGBP);
    }

    private string GetFormattedAmount(decimal amount) => $"{CurrencySymbol}{amount:0.00} {CurrencyCode}";
}
