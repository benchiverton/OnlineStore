@inject PricingService PricingService
@inject CurrencyService CurrencyService

@if (fullPrice > dealPrice)
{
    <h6 style="text-decoration: line-through;">@GetFormattedAmount(fullPrice)</h6>
}
<h5>@GetFormattedAmount(dealPrice)</h5>
<p>@pricing.Details</p>

@code {
    [Parameter]
    public int ProductVarientId { get; set; }
    [Parameter]
    public string CurrencyCode { get; set; }

    private string currencySymbol { get; set; }
    private Pricing pricing { get; set; }
    private decimal fullPrice { get; set; }
    public decimal dealPrice { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        currencySymbol = CurrencyService.GetCurrencyCharacter(CurrencyCode);

        pricing = await PricingService.GetPricingByProductTypId(ProductVarientId);
        fullPrice = await CurrencyService.ConvertCurrency(CurrencyCode, pricing.FullPriceGBP);
        dealPrice = await CurrencyService.ConvertCurrency(CurrencyCode, pricing.DealPriceGBP);
    }

    private string GetFormattedAmount(decimal amount) => $"{currencySymbol}{amount:0.00} {CurrencyCode}";
}
