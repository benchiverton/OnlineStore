@inject PricingService PricingService
@inject CurrencyService CurrencyService

<p>
    Subtotal:
    @if (FullTotalPrice > DealTotalPrice)
    {
    <span style="text-decoration: line-through;">@GetFormattedAmount(FullTotalPrice)</span>
    }
    <b>@GetFormattedAmount(DealTotalPrice)</b>
</p>

@code {
    [Parameter]
    public List<(string, int, int)> ProductVariantIdAndQuantities { get; set; }
    [Parameter]
    public string CurrencyCode { get; set; }

    private string CurrencySymbol { get; set; }
    private decimal FullTotalPrice { get; set; }
    private decimal DealTotalPrice { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        CurrencySymbol = CurrencyService.GetCurrencyCharacter(CurrencyCode);

        if (ProductVariantIdAndQuantities == null)
        {
            return;
        }

        FullTotalPrice = 0m;
        DealTotalPrice = 0m;
        foreach (var productVariantIdAndQuantity in ProductVariantIdAndQuantities)
        {
            var pricing = await PricingService.GetPricingByProductTypeId(productVariantIdAndQuantity.Item1, productVariantIdAndQuantity.Item2);
            FullTotalPrice += pricing.FullPriceGBP * productVariantIdAndQuantity.Item3;
            DealTotalPrice += pricing.DealPriceGBP * productVariantIdAndQuantity.Item3;
        }
    }

    private string GetFormattedAmount(decimal amount) => $"{CurrencySymbol}{amount:0.00} {CurrencyCode}";
}
