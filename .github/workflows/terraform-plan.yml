name: ".NET Build and Terraform Plan"
on:
  pull_request:
    branches: [main]

jobs:
  build-api:
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.100
      - name: Install dependencies
        run: dotnet restore src/Api/Company.Api.sln
      - name: Build
        run: dotnet build src/Api/Company.Api.sln --configuration Release --no-restore
      - name: Test
        run: dotnet test src/Api/Company.Api.sln --no-restore --verbosity normal
      - name: Publish
        run: dotnet publish src/Api/Company.Api/Company.Api.csproj -c Release -o publish --runtime linux-x64

  build-website:
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.100
      - name: Install dependencies
        run: dotnet restore src/Website/Company.Website.sln
      - name: Build
        run: dotnet build src/Website/Company.Website.sln --configuration Release --no-restore
      - name: Test
        run: dotnet test src/Website/Company.Website.sln --no-restore --verbosity normal
      - name: Publish
        run: dotnet publish src/Website/Company.Website/Company.Website.csproj -c Release -o publish --runtime linux-x64

  plan-terraform-test:
    environment: test
    env:
      ARM_CLIENT_ID: ${{ secrets.TF_VAR_AGENT_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.TF_VAR_AGENT_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.TF_VAR_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.TF_VAR_TENANT_ID }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: "./terraform"
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false

      - name: "Terraform Format"
        id: fmt
        run: terraform fmt

      - name: "Terraform Init"
        id: init
        run: terraform init -backend-config="container_name=onlinestoretfstate-test"

      - name: "Terraform Validate"
        id: validate
        run: terraform validate -no-color

      - name: "Terraform Plan"
        id: plan
        run: terraform plan -no-color
        env:
          ARM_CLIENT_ID: ${{ secrets.TF_VAR_AGENT_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.TF_VAR_AGENT_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.TF_VAR_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.TF_VAR_TENANT_ID }}
          TF_VAR_location: "East US"
          TF_VAR_environment: test

      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`${ process.env.PLAN }\`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
