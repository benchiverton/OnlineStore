@page "/basket"
@using System.Collections.Concurrent;

@inject ShoppingBasketService _shoppingBasketService
@inject ProductService _productService

<div class="basket-container">
    @if (_shoppingBasket != null)
    {
        <h2>Shopping Basket</h2>

        <table class="table table-hover">
            <thead>
                <tr>
                    <th scope="col">Item</th>
                    <th scope="col">Price/unit</th>
                    <th scope="col">Quantity</th>
                    <th scope="col">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in _shoppingBasket.Products)
                {
                    _variantDetails.TryGetValue(product.VariantId, out var productAndVariant);
                    <tr>
                        <td>
                            @if (productAndVariant != default)
                            {
                                <div><b>@productAndVariant.product.Name</b></div>
                                <div>@(string.Join(", ", productAndVariant.variant.VariantTypeValues.Values))</div>
                            }
                            else
                            {
                                <b>-</b>
                            }
                        </td>
                        <td>
                            <PricingLabel CurrencyCode="GBP" ProductId="@product.ProductId" ProductVariantId="@product.VariantId" />
                        </td>
                        <td>
                            @product.Quantity
                        </td>
                        <td>
                            TBC
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <PricingTotal TotalType="Final total" CurrencyCode="GBP" ProductVariantIdAndQuantities="@_shoppingBasket.Products?.Select(cp => (cp.ProductId, cp.VariantId, cp.Quantity))?.ToList()"></PricingTotal>
    }
</div>

@code {
    private readonly ConcurrentDictionary<string, (Product product, Variant variant)> _variantDetails = new ConcurrentDictionary<string, (Product product, Variant variant)>();

    private ShoppingBasket _shoppingBasket;

    protected override void OnInitialized()
    {
        _shoppingBasket = _shoppingBasketService.GetShoppingBasketFromStorage();
        Parallel.ForEach(_shoppingBasket.Products, async p =>
        {
            var productDetails = await _productService.GetProductById(p.ProductId);
            var variantDetails = await _productService.GetProductVariantById(p.ProductId, p.VariantId);
            _variantDetails.AddOrUpdate(p.VariantId, _ => (productDetails, variantDetails), (_, _) => (productDetails, variantDetails));
            StateHasChanged();
        });
    }

    private void UpdateItemInShoppingBasket()
    {
        // TODO
    }

    private void RemoveItemFromShoppingBasket()
    {
        // TODO
    }
}
