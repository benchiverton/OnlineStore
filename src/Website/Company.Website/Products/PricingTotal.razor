@inject ProductService _productService
@inject CurrencyService _currencyService

<p>
    @TotalType:
    @if (FullTotalPrice > DealTotalPrice)
    {
        <span class="total-span">@GetFormattedAmount(FullTotalPrice)</span>
    }
    <b>@GetFormattedAmount(DealTotalPrice)</b>
</p>

@code {
    [Parameter]
    public string TotalType { get; set; }
    [Parameter]
    public List<(string productId, string productVarientId, int quantity)> ProductVariantIdAndQuantities { get; set; }
    [Parameter]
    public string CurrencyCode { get; set; }

    private string CurrencySymbol { get; set; }
    private decimal FullTotalPrice { get; set; }
    private decimal DealTotalPrice { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        CurrencySymbol = _currencyService.GetCurrencyCharacter(CurrencyCode);

        if (ProductVariantIdAndQuantities == null)
        {
            return;
        }

        var fullTotalPrice = 0m;
        var dealTotalPrice = 0m;
        foreach (var productVariantIdAndQuantity in ProductVariantIdAndQuantities)
        {
            var price = (await _productService.GetProductVariantById(productVariantIdAndQuantity.productId, productVariantIdAndQuantity.productVarientId)).Price;
            fullTotalPrice += price.FullPriceGBP * productVariantIdAndQuantity.quantity;
            dealTotalPrice += price.DealPriceGBP * productVariantIdAndQuantity.Item3;
        }
        FullTotalPrice = fullTotalPrice;
        DealTotalPrice = dealTotalPrice;
    }

    private string GetFormattedAmount(decimal amount) => $"{CurrencySymbol}{amount:0.00} {CurrencyCode}";
}
