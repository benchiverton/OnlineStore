@page "/products/{ProductId}"

@inject ProductService _productService;
@inject CurrencyService _currencyService

@if (_ready)
{
    <div class="container-fluid">
        <br />
        <div class="row">
            <div class="col-md-6">
                <div class="img-fluid product-image-container">
                    <img class="img-top product-image-img" src="@_product.Images.FirstOrDefault()" alt="image">
                </div>
            </div>
            <div class="col-md">
                <h2>@_product.Name</h2>
                <hr class="divider divider-solid">

                @if (_selectedVariant.Price.FullPriceGBP > _selectedVariant.Price.DealPriceGBP)
                {
                    <table class="b-table table table-sm table-borderless">
                        <tbody>
                            <tr>
                                <td>Full Price:</td>
                            <td><span>@GetFormattedAmount(_selectedVariant.Price.FullPriceGBP)</span></td>
                            </tr>
                            <tr>
                                <td>Price:</td>
                            <td><span class="price-green">@GetFormattedAmount(_selectedVariant.Price.DealPriceGBP)</span></td>
                            </tr>
                            <tr>
                                <td>You Save:</td>
                            <td><span>@GetFormattedAmount(_selectedVariant.Price.FullPriceGBP - _selectedVariant.Price.DealPriceGBP) (@((_selectedVariant.Price.FullPriceGBP - _selectedVariant.Price.DealPriceGBP) / _selectedVariant.Price.FullPriceGBP * 100)%)</span></td>
                            </tr>
                        </tbody>
                    </table>
                }
                else
                {
                <h5>@GetFormattedAmount(_selectedVariant.Price.DealPriceGBP)</h5>
                }
                <p>@_selectedVariant.Price.Details</p>

                <VariantSelector Product="@_product" Variants="@_variants" SelectedVariant="@_selectedVariant" NewProductVariantSelected="@OnNewProductVariantSelected"></VariantSelector>

                <h6>@_product.Headline</h6>
                <p>@_product.Description</p>
            </div>
            <div class="col-md">
                <div class="card">
                    <div class="card-body">
                        <h5>@GetFormattedAmount(_selectedVariant.Price.DealPriceGBP)</h5>

                        <ShoppingBasketButtons ProductId="@ProductId" ProductVariantId="@_selectedVariant.VariantId" OnProductAddedToBasket="OnProductAddedToBasket"></ShoppingBasketButtons>

                        <div hidden="@(!_addedToBasket)">Added to basket!</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string ProductId { get; set; }

    private Product _product;
    private List<Variant> _variants;
    private Variant _selectedVariant;
    private string _currencyCode;
    private string _currencySymbol;
    private bool _ready = false;
    private bool _addedToBasket;

    protected override async Task OnParametersSetAsync()
    {
        _product = await _productService.GetProductById(ProductId);
        _variants = await _productService.GetProductVariants(ProductId);
        _selectedVariant = _variants.FirstOrDefault();
        _currencySymbol = _currencyService.GetCurrencyCharacter("GBP");
        _ready = true;
        await base.OnParametersSetAsync();
    }

    private string GetFormattedAmount(decimal amount) => $"{_currencySymbol}{amount:0.00} {_currencyCode}";

    private void OnNewProductVariantSelected(Variant selectedVariant)
    {
        _selectedVariant = selectedVariant;
        StateHasChanged();
    }

    private void OnProductAddedToBasket()
    {
        _addedToBasket = true;
        StateHasChanged();
    }
}
