@page "/products/{ProductId}"

@inject ProductService _productService;

@if (_ready)
{
    <div class="container-fluid">
        <br />
        <div class="row">
            <div class="col-md-6">
                <div class="img-fluid" style="max-height:500px; overflow: hidden">
                    <img class="img-top" src="@_product.Images.FirstOrDefault()" alt="image" style="width: 100%; height: 40vh; object-fit: cover">
                </div>
            </div>
            <div class="col-md">
                <h2>@_product.Name</h2>
                <hr class="divider divider-solid">

                <PricingBreakdown CurrencyCode="GBP" ProductId="@ProductId" ProductVariantId="@_selectedVariant.VariantId"></PricingBreakdown>

                <VariantSelector Product="@_product" Variants="@_variants" SelectedVariant="@_selectedVariant" NewProductVariantSelected="@OnNewProductVariantSelected"></VariantSelector>

                <h6>@_product.Headline</h6>
                <p>@_product.Description</p>
            </div>
            <div class="col-md">
                <div class="card">
                    <div class="card-body">
                        <PricingSummary CurrencyCode="GBP" ProductId="@ProductId" ProductVariantId="@_selectedVariant.VariantId"></PricingSummary>

                        <CartButtons ProductId="@ProductId" ProductVariantId="@_selectedVariant.VariantId" OnCartAddedToBasket="@(() => _snackbar.Show())"></CartButtons>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<Snackbar @ref="_snackbar" Color="SnackbarColor.Success">
    <div class="snackbar-body">
        <i class="fas fa-check mr-3"></i>Added to cart
    </div>
</Snackbar>

@code {
    [Parameter]
    public string ProductId { get; set; }

    private Product _product;
    private List<Variant> _variants;
    private Variant _selectedVariant;
    private bool _ready = false;

    Snackbar _snackbar;

    protected override async Task OnParametersSetAsync()
    {
        _product = await _productService.GetProductById(ProductId);
        _variants = await _productService.GetProductVariants(ProductId);
        _selectedVariant = _variants.FirstOrDefault();
        _ready = true;
        await base.OnParametersSetAsync();
    }

    private void OnNewProductVariantSelected(Variant selectedVariant)
    {
        _selectedVariant = selectedVariant;
        StateHasChanged();
    }
}
