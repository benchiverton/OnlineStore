@inject PricingService _pricingService
@inject CurrencyService _currencyService

@if (Price != null)
{
    if (Price.FullPriceGBP > Price.DealPriceGBP)
    {
        <table class="b-table table table-sm table-borderless">
            <tbody>
                <tr>
                    <td>Full Price:</td>
                    <td><span>@GetFormattedAmount(Price.FullPriceGBP)</span></td>
                </tr>
                <tr>
                    <td>Price:</td>
                    <td><span class="price-green">@GetFormattedAmount(Price.DealPriceGBP)</span></td>
                </tr>
                <tr>
                    <td>You Save:</td>
                    <td><span>@GetFormattedAmount(Price.FullPriceGBP - Price.DealPriceGBP) (@((Price.FullPriceGBP - Price.DealPriceGBP) / Price.FullPriceGBP * 100)%)</span></td>
                </tr>
            </tbody>
        </table>
    }
    else
    {
        <h5>@GetFormattedAmount(Price.DealPriceGBP)</h5>
    }
    <p>@Price.Details</p>
}

@code {
    [Parameter]
    public string ProductId { get; set; }
    [Parameter]
    public string ProductVariantId { get; set; }
    [Parameter]
    public string CurrencyCode { get; set; }

    private string CurrencySymbol { get; set; }
    private Price Price { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        CurrencySymbol = _currencyService.GetCurrencyCharacter(CurrencyCode);

        Price = await _pricingService.GetPriceByProductTypeId(ProductVariantId);
    }

    private string GetFormattedAmount(decimal amount) => $"{CurrencySymbol}{amount:0.00} {CurrencyCode}";
}
