@inject PricingService PricingService
@inject CurrencyService CurrencyService

@if (Price != null)
{
    if (Price.FullPriceGBP > Price.DealPriceGBP)
    {
        <Table Narrow="true" Borderless="true">
            <TableBody>
                <TableRow>
                    <TableRowCell>Full Price:</TableRowCell>
                    <TableRowCell>
                        <Text Color="TextColor.Black50">@GetFormattedAmount(Price.FullPriceGBP)</Text>
                    </TableRowCell>
                </TableRow>
                <TableRow>
                    <TableRowCell>Price:</TableRowCell>
                    <TableRowCell>
                        <Heading Size="HeadingSize.Is5" TextColor="TextColor.Success">@GetFormattedAmount(Price.DealPriceGBP)</Heading>
                    </TableRowCell>
                </TableRow>
                <TableRow>
                    <TableRowCell>You Save:</TableRowCell>
                    <TableRowCell>
                        <Text Color="TextColor.Success">@GetFormattedAmount(Price.FullPriceGBP - Price.DealPriceGBP) (@((Price.FullPriceGBP - Price.DealPriceGBP) / Price.FullPriceGBP * 100)%)</Text>
                    </TableRowCell>
                </TableRow>
            </TableBody>
        </Table>

    }
    else
    {
        <h5>@GetFormattedAmount(Price.DealPriceGBP)</h5>
    }
    <p>@Price.Details</p>
}

@code {
    [Parameter]
    public string ProductId { get; set; }
    [Parameter]
    public int ProductVariantId { get; set; }
    [Parameter]
    public string CurrencyCode { get; set; }

    private string CurrencySymbol { get; set; }
    private Price Price { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        CurrencySymbol = CurrencyService.GetCurrencyCharacter(CurrencyCode);

        Price = await PricingService.GetPriceByProductTypeId(ProductVariantId);
    }

    private string GetFormattedAmount(decimal amount) => $"{CurrencySymbol}{amount:0.00} {CurrencyCode}";
}
