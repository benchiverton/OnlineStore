@inject PricingService _pricingService
@inject CurrencyService _currencyService

@if (Price != null)
{
    if (Price.FullPriceGBP > Price.DealPriceGBP)
    {
        <span style="text-decoration: line-through;">@GetFormattedAmount(Price.FullPriceGBP)</span>
    }
    <b>@GetFormattedAmount(Price.DealPriceGBP)</b>
}

@code {
    [Parameter]
    public string ProductId { get; set; }
    [Parameter]
    public string ProductVariantId { get; set; }
    [Parameter]
    public string CurrencyCode { get; set; }

    private string CurrencySymbol { get; set; }
    private Price Price { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        CurrencySymbol = _currencyService.GetCurrencyCharacter(CurrencyCode);

        Price = await _pricingService.GetPriceByProductTypeId(ProductVariantId);
    }

    private string GetFormattedAmount(decimal amount) => $"{CurrencySymbol}{amount:0.00} {CurrencyCode}";
}
