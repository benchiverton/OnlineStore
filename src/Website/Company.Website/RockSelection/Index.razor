@page "/petrocks/{PetRockId}"

@inject PetRockService PetRockService;

@if (_ready)
{
    <div class="container-fluid">
        <br />
        <div class="row">
            <div class="col-md-6">
                <div class="img-fluid petrock-image-container">
                    <img class="img-top petrock-image-img" src="@_petRock.Images.FirstOrDefault()" alt="image">
                </div>
            </div>
            <div class="col-md">
                <h2>@_petRock.Name</h2>
                <hr />
                <h5>@_petRock.Headline</h5>
                <p>@_petRock.Description</p>
            </div>
            <div class="col-md">
                <div class="card">
                    <div class="card-body">
                        <h3>Adoption Selection</h3>
                        <hr/>
                        <VariantSelector PetRock="@_petRock" Variants="@_variants" SelectedVariant="@_selectedVariant" NewPetRockVariantSelected="@OnNewPetRockVariantSelected"></VariantSelector>
                        <hr/>
                        <AdoptionButtons PetRockId="@PetRockId" PetRockVariantId="@_selectedVariant.VariantId"></AdoptionButtons>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string PetRockId { get; set; }

    private PetRock _petRock;
    private List<Variant> _variants;
    private Variant _selectedVariant;
    private bool _ready = false;

    protected override async Task OnParametersSetAsync()
    {
        _petRock = await PetRockService.GetPetRockById(PetRockId);
        _variants = await PetRockService.GetPetRockVariants(PetRockId);
        _selectedVariant = _variants.FirstOrDefault();
        _ready = true;
        await base.OnParametersSetAsync();
    }

    private void OnNewPetRockVariantSelected(Variant selectedVariant)
    {
        _selectedVariant = selectedVariant;
        StateHasChanged();
    }
}
